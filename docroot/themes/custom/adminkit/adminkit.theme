<?php

/**
 * @file
 * Functions to support theming in the sub-theme of Gin.
 */

use Drupal\Core\Render\Element;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function adminkit_preprocess_html(array &$variables) {
  // Add adminimal class to the body.
  $variables['attributes']['class'][] = 'adminkit';
}

// *********************************************
// This section in Themekit and Adminkit match
// One for node edit pages and one for layout build modal.
// This is used to support dragula js for paragraphs.
// @todo can this moved to module?
// *********************************************

/**
 * Implements template_theme().
 *
 * Define the new template for the theme below.
 */
function adminkit_theme($existing, $type, $theme, $path) {
  $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
  return [
    'field_multiple_value_form_divs' => [
      'template' => 'field-multiple-value-form-divs',
      'path' => $theme_path . '/templates/layout-builder-admin',
      'theme path' => $theme_path,
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_form_alter().
 */
function adminkit_theme_suggestions_field_multiple_value_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#attached']['library'])) {
    // Classic.
    if ($is_paragraphs_widget = in_array('paragraphs/drupal.paragraphs.admin', $variables['element']['#attached']['library'])) {
      $suggestions[] = 'field_multiple_value_form_divs';
    }
    // Experimental.
    // @todo Need to look more into how the new experimental widget is working,
    // uncommenting the following seems to make it generally work with some
    // different styles, but will need to look into it.
    // if ($is_paragraphs_widget = in_array(
    // 'paragraphs/drupal.paragraphs.widget',
    // $variables['element']['#attached']['library']
    // )) {
    // $suggestions[] = 'field_multiple_value_form_divs';
    // }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function adminkit_preprocess_field_multiple_value_form_divs(array &$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];

  if ($variables['multiple']) {
    $table_id = Html::getUniqueId($element['#field_name'] . '_values');
    $order_class = $element['#field_name'] . '-delta-order';
    $header_attributes = new Attribute(['class' => ['label']]);
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }
    $header = [
      [
        '#prefix' => '<h4' . $header_attributes . '>',
        'title' => [
          '#markup' => $element['#title'],
        ],
        '#suffix' => '</h4>',
      ],
    ];
    $rows = [];

    // Sort items according to '_weight' (needed when the form comes back after
    // preview or failed validation).
    $items = [];
    $variables['button'] = [];
    foreach (Element::children($element) as $key) {
      if ($key === 'add_more') {
        $variables['button'] = &$element[$key];
      }
      else {
        $items[] = &$element[$key];
      }
    }
    usort($items, '_field_multiple_value_form_sort_helper');

    // Add the items as table rows.
    foreach ($items as $item) {
      $item['_weight']['#attributes']['class'] = [$order_class];
      $item['_weight']['#attributes']['class'] = 'draggable';
    }

    $variables['paragraphs_field_header'] = $header;
    $variables['paragraphs_field_items'] = $items;

    $variables['table'] = [
      '#type' => 'table',
      '#header' => $header,
      '#rows' => $rows,
      '#attributes' => [
        'id' => $table_id,
        'class' => ['field-multiple-table'],
      ],
      '#tabledrag' => [
        [
          'action' => 'order',
          'relationship' => 'sibling',
          'group' => $order_class,
        ],
      ],
    ];

    if (!empty($element['#description'])) {
      $description_id = $element['#attributes']['aria-describedby'];
      $description_attributes['id'] = $description_id;
      $variables['description']['attributes'] = new Attribute($description_attributes);
      $variables['description']['content'] = $element['#description'];

      // Add the description's id to the table aria attributes.
      $variables['table']['#attributes']['aria-describedby'] = $element['#attributes']['aria-describedby'];
    }
  }
  else {
    $variables['elements'] = [];
    foreach (Element::children($element) as $key) {
      $variables['elements'][] = $element[$key];
    }
  }
}
